#include<iostream>
using namespace std;
//继承中同名成员的处理
class Base
{
public:
	static int m_A;
	static void func()
	{
		cout << "Base-static func()" << endl;
	}
};
int Base::m_A = 100;
class Son :public Base
{
public:
	static int m_A;
	static void func()
	{
		cout << "Son-static func()" << endl;
	}
};
int Son::m_A = 200;
//同名的静态成员属性的处理
void test01()
{
	Son s1;
	//1通过对象访问数据
	cout << "通过对象访问数据" << endl;
	cout << "Son下的m_A=" << s1.m_A << endl;
	//如果通过子类对象访问到父类中的同名静态成员，需要加作用域
	cout << "Base下的m_A=" << s1.Base::m_A << endl;
	//通过类名访问数据
	cout << "通过类名访问" << endl;
	cout << "Son下的m_A=" << Son::m_A<< endl;
	//第一个::代表通过类名方式访问，第二个::代表访问父类作用域下
	cout << "Base下的m_A=" << Son::Base::m_A << endl;
}
//同名的静态成员函数的处理
void test02()
{
	Son s2;
	//通过对象访问
	cout << "通过对象访问" << endl;
	s2.func();
	s2.Base::func();
	//通过类名访问
	cout << "通过类名访问" << endl;
	Son::func();
	Son::Base::func();

}
int main()
{
	/*test01();*/
	test02();
	return 0;
}